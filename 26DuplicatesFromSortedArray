
# Reulsts, section 1:
# Runtime: 108 ms, faster than 35.67% of Python3 online submissions for Remove Duplicates from Sorted Array.
# Memory Usage: 15.5 MB, less than 5.74% of Python3 online submissions for Remove Duplicates from Sorted Array.
# My secondary solution, an attempt at optimization. Time significantly reduced, however still not
# statistically above average for this problem.

# Results, section 2:
# Runtime: 580 ms, faster than 7.14% of Python3 online submissions for Remove Duplicates from Sorted Array.
# Memory Usage: 15.3 MB, less than 5.74% of Python3 online submissions for Remove Duplicates from Sorted Array.
# My original solution, unoptimized. 

# My input: As a junior dev I prefer the format of my original solution to my second one because of its readability.
# I feel like it makes code easier to maintain. That being said, I'm sure there are easy to read, better
# optimized solutions out there, and I am eagerly studying them in the solutions tab.


class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:

# Section 1
#         if len(nums) > 1:
#             del_count = 0
#             for i in range(1, len(nums)):
#                 if nums[i - (del_count + 1)] == nums[i - del_count]:
#                     nums.pop(i-del_count)
#                     del_count = del_count + 1
#         return len(nums)

#Section 2
        if len(nums) > 1:
            prev = nums[0]
            for num in nums[1:]:
                if num == prev:
                    nums.remove(num)
                prev = num
        return len(nums)
